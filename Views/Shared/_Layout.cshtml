<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Capstone_Next_Step</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    
    <link rel="stylesheet" href="~/Capstone_Next_Step.styles.css" asp-append-version="true" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

     <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <div class="sidebar" id="sidebar">
        <div class="logo-container">
            <div>Next Step</div>
        </div>
        <ul class="sidebar-menu" id="sidebar-menu">
            <!-- Sidebar items will be generated here -->
        </ul>
    </div>


    @if (!string.IsNullOrEmpty(Context.Session.GetString("UserName")))
    {
        <div class="main-content">
            <!-- Top Navigation Bar -->
            <div class="top-navbar d-flex justify-content-between align-items-center px-4 py-2 shadow-sm" style="background: #fff; border-radius: 0 0 16px 16px;">
                <div class="d-flex align-items-center gap-3">
                    <div class="hamburger me-3" id="sidebarToggle">
                        <i class="fas fa-bars fa-lg"></i>
                    </div>
                    <div class="search-bar position-relative">
                        @{ 
                            var lang = Context.Session.GetString("lang");
                            var isArabicLang = lang == "ar";
                            var searchPlaceholder = isArabicLang 
                                ? "ابحث عن الأصول، المنتجات، الموظفين..." 
                                : "Search assets, products, employees...";
                            var inputDir = isArabicLang ? "rtl" : "ltr";
                        }
                        <i class="fas fa-search position-absolute" style="left: 10px; top: 50%; transform: translateY(-50%); color: #6366f1;"></i>
                        <input type="text" class="form-control ps-5" id="globalSearch" placeholder="@searchPlaceholder" dir="@inputDir" style="border-radius: 20px; min-width: 300px;">
                        <div id="searchResults" class="position-absolute w-100 bg-white border rounded shadow-sm" style="top: 100%; left: 0; z-index: 1000; display: none; max-height: 400px; overflow-y: auto;"></div>
                    </div>
                </div>
                <div class="d-flex align-items-center gap-4">
                    <div class="language-selector d-flex align-items-center gap-1">
                        <button id="lang-en" type="button" class="btn btn-link p-0 me-2" style="font-weight: 500;">English</button>
                        <span>|</span>
                        <button id="lang-ar" type="button" class="btn btn-link p-0 ms-2" style="font-weight: 500;">عربي</button>
                    </div>
                    <div class="theme-toggle ms-3">
                        <button id="themeToggle" type="button" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-moon"></i> <span id="themeText">Dark Mode</span>
                        </button>
                    </div>
                    <div class="notification-badge position-relative">
                        @{ var uname = Context.Session.GetString("UserName"); }
                        <a href="/Notification/Index" class="text-decoration-none position-relative">
                            <i class="fas fa-bell fa-lg"></i>
                            <span class="badge bg-danger position-absolute top-0 start-100 translate-middle p-1 rounded-circle" id="notifCount" style="display:none">0</span>
                        </a>
                    </div>
                    <div class="dropdown">
                        <a href="#" class="d-flex align-items-center text-decoration-none dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="user-avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2 overflow-hidden" id="navbarAvatar" style="width: 40px; height: 40px; font-size: 1.2rem;">
                                @{
                                    var userName = Context.Session.GetString("Name");
                                    var profileImg = Context.Session.GetString("ProfileImage");
                                    var displayChar = !string.IsNullOrEmpty(userName) ? userName.Substring(0, 1).ToUpper() : "U";
                                }
                                @if (!string.IsNullOrEmpty(profileImg))
                                {
                                    <img src="@profileImg" alt="Profile" class="w-100 h-100 rounded-circle" />
                                }
                                else
                                {
                                    @displayChar
                                }
                            </div>
                            <div class="user-info text-start">
                                <div class="fw-bold">@(Context.Session.GetString("Name") ?? "User")</div>
                                <div class="badge bg-secondary">@(Context.Session.GetString("Role") ?? "User")</div>
                            </div>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                            <li><a class="dropdown-item" href="/Profile/Index"><i class="fas fa-user me-2"></i>Profile</a></li>
                            <li><a class="dropdown-item" href="/Login/Logout"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="pt-3">
                    <div class="container">
                        <!-- Success/Error Messages -->
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle me-2"></i>
                                @TempData["SuccessMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                @TempData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        
                        @if (!ViewData.ModelState.IsValid)
                        {
                            var isArabic = Context.Session.GetString("lang") == "ar";
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @(isArabic ? "يرجى تصحيح الأخطاء التالية:" : "Please correct the following errors:")
                                <ul class="mb-0 mt-2">
                                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                </ul>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        
                        <main role="main" class="pb-3">
                            @RenderBody()
                        </main>
                    </div>
                </div>
            </main>

           

        </div>
    }
    <script>
        const currentPath = window.location.pathname.toLowerCase();

        // سايد بار ديناميكي عربي/إنجليزي
        const lang = '@(Context.Session.GetString("lang") ?? "en")';
        const sidebarItems = [
            lang === 'ar' ? { text: "الرئيسية", icon: "fas fa-home", url: "/Home/Index" } : { text: "Home", icon: "fas fa-home", url: "/Home/Index" },
            lang === 'ar' ? { text: "المخزون", icon: "fas fa-box", url: "/Asset/Inventory" } : { text: "Inventory", icon: "fas fa-box", url: "/Asset/Inventory" },
            lang === 'ar' ? { text: "الأصول", icon: "fas fa-server", url: "/asset/index" } : { text: "Assets", icon: "fas fa-server", url: "/asset/index" },
            lang === 'ar' ? { text: "التقارير", icon: "fas fa-chart-bar", url: "/report/index" } : { text: "Reports", icon: "fas fa-chart-bar", url: "/report/index" },
            lang === 'ar' ? { text: "الموظفين", icon: "fas fa-users", url: "/home/employee" } : { text: "Employees", icon: "fas fa-users", url: "/home/employee" },
            lang === 'ar' ? { text: "الدردشة", icon: "fas fa-comments", url: "/chat/index" } : { text: "Chat", icon: "fas fa-comments", url: "/chat/index" },
            lang === 'ar' ? { text: "الإعدادات", icon: "fas fa-cog", url: "/profile/index" } : { text: "Settings", icon: "fas fa-cog", url: "/profile/index" },
            lang === 'ar' ? { text: "الخريطة", icon: "fas fa-life-ring", url: "/asset/viewmap" } : { text: "Map", icon: "fas fa-life-ring", url: "/asset/viewmap" },
            lang === 'ar' ? { text: "تسجيل الخروج", icon: "fas fa-sign-out-alt", url: "#", isLogout: true } : { text: "Logout", icon: "fas fa-sign-out-alt", url: "#", isLogout: true }
        ];
        const sidebarMenu = document.getElementById("sidebar-menu");
        sidebarMenu.innerHTML = "";
        sidebarItems.forEach(item => {
            const li = document.createElement("li");
            li.classList.add("sidebar-item");
            if (currentPath === new URL(item.url, window.location.origin).pathname.toLowerCase()) {
                li.classList.add("active");
            }
            const a = document.createElement("a");
            a.href = item.url;
            const icon = document.createElement("i");
            icon.className = item.icon;
            const span = document.createElement("span");
            span.textContent = item.text;
            a.appendChild(icon);
            a.appendChild(span);
            li.appendChild(a);
            if (item.isLogout) {
                a.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (confirm('هل تريد تسجيل الخروج؟')) {
                        window.location.href = '/Login/Logout';
                    }
                });
            }
            sidebarMenu.appendChild(li);
        });

        // Global Search Functionality
        const searchInput = document.getElementById('globalSearch');
        const searchResults = document.getElementById('searchResults');
        let searchTimeout;

        if (searchInput && searchResults) {
            console.log('Search elements found');
            
            searchInput.addEventListener('input', function() {
                const query = this.value.trim();
                console.log('Search input:', query);
                
                clearTimeout(searchTimeout);
                
                if (query.length < 2) {
                    searchResults.style.display = 'none';
                    return;
                }

                searchTimeout = setTimeout(() => {
                    performSearch(query);
                }, 300);
            });

            // Hide search results when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                    searchResults.style.display = 'none';
                }
            });

            // Handle Enter key for full search
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const query = this.value.trim();
                    if (query.length > 0) {
                        console.log('Redirecting to search page with query:', query);
                        window.location.href = `/Search/Index?q=${encodeURIComponent(query)}`;
                    }
                }
            });
        } else {
            console.log('Search elements not found');
        }

        function performSearch(query) {
            console.log('Performing search for:', query);
            
            fetch(`/Search/QuickSearch?term=${encodeURIComponent(query)}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Search results:', data);
                    displaySearchResults(data.results || []);
                })
                .catch(error => {
                    console.error('Search error:', error);
                    if (searchResults) {
                        searchResults.innerHTML = '<div class="p-3 text-danger">خطأ في البحث: ' + error.message + '</div>';
                        searchResults.style.display = 'block';
                    }
                });
        }

        function displaySearchResults(results) {
            if (!searchResults) {
                console.log('Search results container not found');
                return;
            }
            
            if (!results || results.length === 0) {
                searchResults.innerHTML = '<div class="p-3 text-muted">لا توجد نتائج</div>';
                searchResults.style.display = 'block';
                return;
            }

            let html = '';
            results.forEach(result => {
                html += `
                    <div class="search-result-item p-3 border-bottom" style="cursor: pointer;" onclick="window.location.href='${result.url}'">
                        <div class="d-flex align-items-center">
                            <i class="${result.icon} me-3 text-primary"></i>
                            <div class="flex-grow-1">
                                <div class="fw-bold">${result.title}</div>
                                <div class="text-muted small">${result.subtitle}</div>
                                <div class="badge bg-secondary">${result.type}</div>
                            </div>
                        </div>
                    </div>
                `;
            });

            html += `
                <div class="p-2 text-center">
                    <a href="/Search/Index?q=${encodeURIComponent(searchInput.value.trim())}" class="btn btn-sm btn-outline-primary">
                        عرض جميع النتائج
                    </a>
                </div>
            `;

            searchResults.innerHTML = html;
            searchResults.style.display = 'block';
        }

        // Sidebar toggle functionality
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebar = document.querySelector('.sidebar');
        const mainContent = document.querySelector('.main-content');

        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', function() {
                sidebar.classList.toggle('collapsed');
                mainContent.classList.toggle('expanded');
            });
        }

        // Theme toggle functionality
        const themeToggle = document.getElementById('themeToggle');
        const themeText = document.getElementById('themeText');
        const body = document.body;

        if (themeToggle) {
            themeToggle.addEventListener('click', function() {
                body.classList.toggle('dark-theme');
                const isDark = body.classList.contains('dark-theme');
                themeText.textContent = isDark ? 'Light Mode' : 'Dark Mode';
                themeToggle.querySelector('i').className = isDark ? 'fas fa-sun' : 'fas fa-moon';
            });
        }

        // Language toggle functionality
        const langEn = document.getElementById('lang-en');
        const langAr = document.getElementById('lang-ar');

        if (langEn && langAr) {
            langEn.addEventListener('click', function() {
                // Set language to English
                fetch('/Home/SetLanguage?lang=en', { method: 'POST' })
                    .then(() => window.location.reload());
            });

            langAr.addEventListener('click', function() {
                // Set language to Arabic
                fetch('/Home/SetLanguage?lang=ar', { method: 'POST' })
                    .then(() => window.location.reload());
            });
        }
    </script>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<script>
// Language Switcher
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('lang-en').onclick = function() {
        fetch('/Home/SetLanguage?lang=en').then(() => location.reload());
    };
    document.getElementById('lang-ar').onclick = function() {
        fetch('/Home/SetLanguage?lang=ar').then(() => location.reload());
    };

    // Theme Toggle
    const themeToggle = document.getElementById('themeToggle');
    const themeText = document.getElementById('themeText');
    let dark = localStorage.getItem('theme') === 'dark';
    setTheme(dark);
    themeToggle.onclick = function() {
        dark = !dark;
        setTheme(dark);
        localStorage.setItem('theme', dark ? 'dark' : 'light');
    };
    function setTheme(isDark) {
        if(isDark) {
            document.body.classList.add('dark-mode');
            themeText.textContent = 'Light Mode';
            themeToggle.querySelector('i').className = 'fas fa-sun';
        } else {
            document.body.classList.remove('dark-mode');
            themeText.textContent = 'Dark Mode';
            themeToggle.querySelector('i').className = 'fas fa-moon';
        }
    }
    // Fetch unread notification count
    fetch('/Search/Count', { method: 'GET' }).catch(()=>{});
    fetch('/Notification/Index', { method: 'GET' }).then(r=>r.text()).then(()=>{
        // This just ensures session is present; actual count is fetched below
    });
    fetch('/api/notifications/unread-count').then(r=>r.json()).then(d=>{
        const el = document.getElementById('notifCount');
        if (!el) return;
        const count = d && typeof d.count === 'number' ? d.count : 0;
        el.textContent = count;
        el.style.display = count > 0 ? 'inline-block' : 'none';
    }).catch(()=>{});
});
</script>
