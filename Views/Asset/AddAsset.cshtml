<div class="form-container">
    <h4 class="mb-4">Add Asset</h4>
    <form action="AddAssetsForm" id="itemForm">
        <!-- Image Upload Area -->
        <div class="mb-3">
            <input name="ImageUrl" type="text" class="form-control" id="imageUrl" placeholder="Image URL" required>
            <div class="error-message" id="url-error"></div>
        </div>


        <div class="mb-3">
            <input name="Name" type="text" class="form-control" id="name" placeholder="name" required>
        </div>
        <div class="mb-3">
            <input name="Category" type="text" class="form-control" id="category" placeholder="category" required>
        </div>
        <div class="mb-3">
            <input name="Date" type="hidden" class="form-control" id="category" placeholder="DateTime" required>
        </div>

        <div class="mb-3">
            <input name="Type" type="text" class="form-control" id="category" placeholder="Type" required>
        </div>
        <div class="mb-3">
            <input name="Color" type="text" class="form-control" id="category" placeholder="Color" required>
        </div>
        <div class="mb-3">
            <label for="locationSelect" class="form-label">Location</label>
            <select name="Location" class="form-select" id="locationSelect" required>
                <option value="" selected disabled>اختر الموقع</option>
                <option value="cairo">القاهرة</option>
                <option value="alexandria">الإسكندرية</option>
                <option value="giza">الجيزة</option>
                <option value="6 october">6 أكتوبر</option>
                <option value="new cairo">القاهرة الجديدة</option>
                <option value="nasr city">مدينة نصر</option>
                <option value="abbassia">العباسية</option>
                <option value="ain shams">عين شمس</option>
                <option value="shoubra">شبرا</option>
                <option value="shoubra el kheima">شبرا الخيمة</option>
                <option value="el marg">المرج</option>
                <option value="helwan">حلوان</option>
                <option value="maadi">المعادي</option>
                <option value="zamalek">الزمالك</option>
                <option value="dokki">الدقي</option>
                <option value="mohandessin">المهندسين</option>
                <option value="agouza">العجوزة</option>
                <option value="badr city">مدينة بدر</option>
                <option value="obour city">مدينة العبور</option>
                <option value="shorouk city">مدينة الشروق</option>
                <option value="rehab city">مدينة الرحاب</option>
                <option value="madinaty">مدينتي</option>
                <option value="tagammu el khamis">التجمع الخامس</option>
                <option value="tagammu el awal">التجمع الأول</option>
                <option value="tagammu el thani">التجمع الثاني</option>
                <option value="tagammu el thaleth">التجمع الثالث</option>
                <option value="tagammu el rabe3">التجمع الرابع</option>
                <option value="tagammu el sadis">التجمع السادس</option>
                <option value="tagammu el sabi3">التجمع السابع</option>
                <option value="tagammu el thamin">التجمع الثامن</option>
                <option value="tagammu el tasi3">التجمع التاسع</option>
                <option value="tagammu el 3ashir">التجمع العاشر</option>
                <option value="luxor">الأقصر</option>
                <option value="aswan">أسوان</option>
                <option value="hurghada">الغردقة</option>
                <option value="sharm el sheikh">شرم الشيخ</option>
                <option value="port said">بورسعيد</option>
                <option value="suez">السويس</option>
                <option value="ismailia">الإسماعيلية</option>
                <option value="mansoura">المنصورة</option>
                <option value="tanta">طنطا</option>
                <option value="zagazig">الزقازيق</option>
                <option value="fayoum">الفيوم</option>
                <option value="beni suef">بني سويف</option>
                <option value="minya">المنيا</option>
                <option value="asyut">أسيوط</option>
                <option value="sohag">سوهاج</option>
                <option value="qena">قنا</option>
                <option value="kom ombo">كوم أمبو</option>
                <option value="edfu">إدفو</option>
            </select>
        </div>
        
        <!-- إحداثيات دقيقة (اختياري) -->
        <div class="mb-3">
            <label class="form-label">إحداثيات دقيقة (اختياري)</label>
            <div class="row">
                <div class="col-md-6">
                    <input type="number" step="0.000001" class="form-control" id="latitude" placeholder="خط العرض (Latitude)" 
                           name="Latitude" min="-90" max="90">
                </div>
                <div class="col-md-6">
                    <input type="number" step="0.000001" class="form-control" id="longitude" placeholder="خط الطول (Longitude)" 
                           name="Longitude" min="-180" max="180">
                </div>
            </div>
            <small class="form-text text-muted">اتركها فارغة لاستخدام إحداثيات المدينة المختارة</small>
        </div>
        <div class="mb-3">
            <label  for="exampleSelect" class="form-label">Status</label>
            <select name="Status" class="form-select" id="exampleSelect">
                <option selected disabled></option>
                <option value="Pending">Pending </option>
                <option value="In-Progress">In-Progress </option>
                <option value="Complete">Complete</option>
            </select>
        </div>
        <div class="mb-4">
            <input name="Price" type="number" class="form-control" id="inStockCount" placeholder="in-stock count" required>
        </div>
        <div class="mb-4">
            <input name="User" type="number" class="form-control" id="inStockCount" placeholder="User ID" required>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const previewImage = document.getElementById('preview-image');
        const imageError = document.getElementById('image-error');
        const form = document.getElementById('itemForm');
        const locationSelect = document.getElementById('locationSelect');
        const latitudeInput = document.getElementById('latitude');
        const longitudeInput = document.getElementById('longitude');

        // Open file dialog when clicking on the drop area
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Prevent default behavior for drag events
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop area when dragging over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropArea.classList.add('highlight');
        }

        function unhighlight() {
            dropArea.classList.remove('highlight');
        }

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;

            if (files.length > 0) {
                handleFiles(files);
            }
        }

        // Handle file input change
        fileInput.addEventListener('change', function() {
            handleFiles(this.files);
        });

        function handleFiles(files) {
            const file = files[0];

            // Check file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                showError('Please upload a valid image file (JPG, PNG, or GIF)');
                return;
            }

            // Check file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showError('File size exceeds 5MB limit');
                return;
            }

            // Preview the image
            const reader = new FileReader();
            reader.onload = function(e) {
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
                imageError.style.display = 'none';
                // Hide the icon and text when image is displayed
                document.querySelector('.upload-icon').style.display = 'none';
                document.querySelector('.upload-text').style.display = 'none';
            }
            reader.readAsDataURL(file);
        }

        function showError(message) {
            imageError.textContent = message;
            imageError.style.display = 'block';
            previewImage.style.display = 'none';
            // Show the icon and text when there's an error
            document.querySelector('.upload-icon').style.display = 'block';
            document.querySelector('.upload-text').style.display = 'block';
        }

        // Location handling
        if (locationSelect) {
            locationSelect.addEventListener('change', function() {
                const selectedLocation = this.value;
                if (selectedLocation) {
                    // يمكن إضافة منطق إضافي هنا إذا لزم الأمر
                    console.log('Selected location:', selectedLocation);
                }
            });
        }

        // Coordinate validation
        if (latitudeInput && longitudeInput) {
            latitudeInput.addEventListener('input', validateCoordinates);
            longitudeInput.addEventListener('input', validateCoordinates);
        }

        function validateCoordinates() {
            const lat = parseFloat(latitudeInput.value);
            const lng = parseFloat(longitudeInput.value);
            
            if (lat < -90 || lat > 90) {
                latitudeInput.setCustomValidity('خط العرض يجب أن يكون بين -90 و 90');
            } else {
                latitudeInput.setCustomValidity('');
            }
            
            if (lng < -180 || lng > 180) {
                longitudeInput.setCustomValidity('خط الطول يجب أن يكون بين -180 و 180');
            } else {
                longitudeInput.setCustomValidity('');
            }
        }

        // Form submission (you can customize this based on your backend needs)
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            // Check if image is uploaded
            if (!fileInput.files.length) {
                showError('Please upload a product image');
                return;
            }

            // Here you would typically submit the form data
            // For example, using FormData and fetch:
            const formData = new FormData(form);

            // Example fetch request (uncomment and modify as needed)
            /*
            fetch('your-backend-endpoint', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                // Handle success (e.g., show success message, reset form)
                form.reset();
                previewImage.style.display = 'none';
                document.querySelector('.upload-icon').style.display = 'block';
                document.querySelector('.upload-text').style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle error
            });
            */

            // For demo purposes, just log the form data
            console.log('Form submitted!');
            for (let [key, value] of formData.entries()) {
                console.log(key, value);
            }

            // Comment out the alert for production use
            alert('Product added successfully!');

            // Reset form
            form.reset();
            previewImage.style.display = 'none';
            document.querySelector('.upload-icon').style.display = 'block';
            document.querySelector('.upload-text').style.display = 'block';
        });
    });
</script>
