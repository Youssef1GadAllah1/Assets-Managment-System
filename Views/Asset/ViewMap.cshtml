<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Asset Tracking Map - Egypt</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #map {
            height: 600px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .asset-marker {
            background-color: #3b82f6;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 12px;
            border: 2px solid white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

            .asset-marker.in-use {
                background-color: #ef4444;
            }

            .asset-marker.maintenance {
                background-color: #f59e0b;
            }

        .asset-popup {
            min-width: 200px;
        }

        .asset-status {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-available {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-in-use {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .status-maintenance {
            background-color: #fef3c7;
            color: #92400e;
        }

        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 200px;
            font-size: 18px;
            color: #6b7280;
        }

        .spinner {
            border: 4px solid #f3f4f6;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-right: 10px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Asset Tracking Map - Egypt</h1>
        <p class="text-gray-600 mb-6">Real-time visualization of asset locations across Egypt</p>

        <div class="bg-white p-4 rounded-lg shadow mb-6">
            <div id="loadingMap" class="loading">
                <div class="spinner"></div>
                Loading asset data...
            </div>
            <div id="map" style="display: none;"></div>
        </div>

        <div class="bg-white p-4 rounded-lg shadow">
            <h2 class="text-xl font-semibold mb-4">Asset Summary</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4" id="assetSummary">
                <!-- Summary will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let assetMarkers;
        let assets = [
            {
                id: 1,
                name: "Company Van",
                description: "Ford Transit 2020",
                location: { lat: 30.0444, lng: 31.2357 }, // Cairo
                status: "in-use",
                assignedTo: "Ahmed Hassan",
                lastUpdated: "2024-12-15T10:30:00Z"
            },
            {
                id: 2,
                name: "Laptop",
                description: "Dell XPS 15",
                location: { lat: 31.2001, lng: 29.9187 }, // Alexandria
                status: "available",
                assignedTo: null,
                lastUpdated: "2024-12-14T15:45:00Z"
            },
            {
                id: 3,
                name: "Drill Press",
                description: "Industrial grade",
                location: { lat: 25.6872, lng: 32.6396 }, // Luxor
                status: "maintenance",
                assignedTo: "Maintenance Dept",
                lastUpdated: "2024-12-10T08:15:00Z"
            },
            {
                id: 4,
                name: "Forklift",
                description: "Toyota 3-ton",
                location: { lat: 27.2579, lng: 33.8116 }, // Hurghada
                status: "available",
                assignedTo: null,
                lastUpdated: "2024-12-12T11:20:00Z"
            },
            {
                id: 5,
                name: "Security Camera",
                description: "Outdoor 4K",
                location: { lat: 24.0889, lng: 32.8998 }, // Aswan
                status: "in-use",
                assignedTo: "Security Team",
                lastUpdated: "2024-12-15T09:10:00Z"
            },
            {
                id: 6,
                name: "Generator",
                description: "Diesel 50KW",
                location: { lat: 26.8206, lng: 30.8025 }, // Central Egypt
                status: "available",
                assignedTo: null,
                lastUpdated: "2024-12-13T14:30:00Z"
            }
        ];

        // Initialize the map centered on Egypt
        function initializeMap() {
            map = L.map('map').setView([26.8206, 30.8025], 6); // Center on Egypt

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Create a feature group to store our asset markers
            assetMarkers = L.featureGroup().addTo(map);
        }

        // Add markers for each asset
        function addAssetMarkers() {
            // Clear existing markers
            assetMarkers.clearLayers();

            assets.forEach(asset => {
                const marker = L.marker([asset.location.lat, asset.location.lng], {
                    icon: L.divIcon({
                        className: `asset-marker ${asset.status === 'available' ? '' :
                                  asset.status === 'in-use' ? 'in-use' : 'maintenance'}`,
                        html: asset.id.toString()
                    })
                });

                marker.bindPopup(createAssetPopup(asset));
                assetMarkers.addLayer(marker);
            });

            // Fit map to show all markers if there are any
            if (assets.length > 0) {
                map.fitBounds(assetMarkers.getBounds(), { padding: [20, 20] });
            }
        }

        // Create HTML content for asset popup
        function createAssetPopup(asset) {
            const statusText = asset.status === "available" ? "Available" :
                               asset.status === "in-use" ? "In Use" : "Maintenance";

            const statusClass = asset.status === "available" ? "status-available" :
                                asset.status === "in-use" ? "status-in-use" : "status-maintenance";

            const lastUpdated = asset.lastUpdated ? new Date(asset.lastUpdated).toLocaleString('en-EG') : 'Unknown';

            return `
                <div class="asset-popup">
                    <h3 class="font-bold text-lg mb-1">${asset.name}</h3>
                    <p class="text-gray-600 mb-2">${asset.description || 'No description available'}</p>
                    <div class="flex justify-between mb-2">
                        <span class="text-sm text-gray-500">Status:</span>
                        <span class="${statusClass} asset-status">${statusText}</span>
                    </div>
                    ${asset.assignedTo ? `
                        <div class="flex justify-between mb-2">
                            <span class="text-sm text-gray-500">Assigned to:</span>
                            <span class="text-sm">${asset.assignedTo}</span>
                        </div>
                    ` : ''}
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500">Last updated:</span>
                        <span class="text-sm">${lastUpdated}</span>
                    </div>
                </div>
            `;
        }

        // Update asset summary cards
        function updateAssetSummary() {
            const summaryContainer = document.getElementById("assetSummary");

            // Count assets by status
            const statusCounts = {
                available: assets.filter(a => a.status === "available").length,
                "in-use": assets.filter(a => a.status === "in-use").length,
                maintenance: assets.filter(a => a.status === "maintenance").length
            };

            // Create summary cards
            summaryContainer.innerHTML = `
                <div class="bg-blue-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-blue-800 mb-2">Available Assets</h3>
                    <p class="text-3xl font-bold text-blue-600">${statusCounts.available}</p>
                    <p class="text-sm text-blue-500 mt-1">Ready for assignment</p>
                </div>
                <div class="bg-red-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-red-800 mb-2">Assets In Use</h3>
                    <p class="text-3xl font-bold text-red-600">${statusCounts["in-use"]}</p>
                    <p class="text-sm text-red-500 mt-1">Currently assigned</p>
                </div>
                <div class="bg-yellow-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-yellow-800 mb-2">Under Maintenance</h3>
                    <p class="text-3xl font-bold text-yellow-600">${statusCounts.maintenance}</p>
                    <p class="text-sm text-yellow-500 mt-1">Being serviced</p>
                </div>
            `;
        }

        // Initialize the application
        function initApp() {
            initializeMap();
            addAssetMarkers();
            updateAssetSummary();

            // Show the map and hide loading
            document.getElementById('loadingMap').style.display = 'none';
            document.getElementById('map').style.display = 'block';

            // Refresh the map size after showing
            setTimeout(() => {
                map.invalidateSize();
            }, 100);
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>
